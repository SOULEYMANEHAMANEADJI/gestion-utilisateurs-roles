name: Deploy to Production

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3
        extensions: mbstring, dom, fileinfo, mysql, pdo_mysql, bcmath, gd, zip

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Install Composer dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --optimize-autoloader

    - name: Install NPM dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Run database migrations
      env:
        DB_CONNECTION: ${{ secrets.DB_CONNECTION }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_DATABASE: ${{ secrets.DB_DATABASE }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      run: |
        php artisan migrate --force

    - name: Cache configuration
      run: |
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache

    - name: Deploy to server
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
      run: |
        # Exemple de dÃ©ploiement avec rsync
        # Vous pouvez adapter selon votre infrastructure
        echo "Deploying to $DEPLOY_HOST:$DEPLOY_PATH"
        
        # CrÃ©er un script de dÃ©ploiement temporaire
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Sauvegarder la version actuelle
        if [ -d "$DEPLOY_PATH" ]; then
          cp -r "$DEPLOY_PATH" "$DEPLOY_PATH.backup.$(date +%Y%m%d_%H%M%S)"
        fi
        
        # Synchroniser les fichiers
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='tests' \
          --exclude='.github' \
          --exclude='storage/logs' \
          --exclude='storage/framework/cache' \
          --exclude='storage/framework/sessions' \
          --exclude='storage/framework/views' \
          --exclude='.env' \
          ./ "$DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/"
        
        # DÃ©finir les permissions
        ssh "$DEPLOY_USER@$DEPLOY_HOST" "chmod -R 755 $DEPLOY_PATH && chmod -R 777 $DEPLOY_PATH/storage $DEPLOY_PATH/bootstrap/cache"
        
        echo "Deployment completed successfully!"
        EOF
        
        chmod +x deploy.sh
        ./deploy.sh

    - name: Health check
      run: |
        echo "Performing health check..."
        # Ajouter ici vos vÃ©rifications de santÃ©
        # Par exemple : curl -f https://votre-domaine.com/health

    - name: Notify deployment success
      run: |
        echo "ðŸš€ Deployment to production completed successfully!"
        # Ici vous pouvez ajouter des notifications (Slack, Discord, Email, etc.)

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [8.2, 8.3]
        node-version: [18, 20]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, dom, fileinfo, mysql, pdo_mysql, bcmath, gd, zip
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install Composer dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Install NPM dependencies
      run: npm ci

    - name: Generate key
      run: php artisan key:generate

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Create Database
      run: |
        mysql --host 127.0.0.1 --port 3306 -uroot -ppassword -e "CREATE DATABASE IF NOT EXISTS testing;"

    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: testing
        DB_USERNAME: root
        DB_PASSWORD: password
      run: php artisan test --coverage --coverage-clover=coverage.xml

    - name: Build assets
      run: npm run build

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3
        extensions: mbstring, dom, fileinfo, mysql, pdo_mysql, bcmath, gd, zip

    - name: Install Composer dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Run PHPStan
      run: |
        composer require --dev phpstan/phpstan --no-interaction
        ./vendor/bin/phpstan analyse --memory-limit=2G

    - name: Run PHP CodeSniffer
      run: |
        composer require --dev squizlabs/php_codesniffer --no-interaction
        ./vendor/bin/phpcs --standard=PSR12 app/ tests/

    - name: Run Laravel Pint (Code Style)
      run: |
        composer require --dev laravel/pint --no-interaction
        ./vendor/bin/pint --test

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3
        extensions: mbstring, dom, fileinfo, mysql, pdo_mysql, bcmath, gd, zip

    - name: Install Composer dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Run Security Checker
      run: |
        composer require --dev enlightn/security-checker --no-interaction
        ./vendor/bin/security-checker security:check

    - name: Run Laravel Security Check
      run: |
        composer require --dev roave/security-advisories:dev-master --no-interaction

  build:
    runs-on: ubuntu-latest
    needs: [tests, code-quality, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3
        extensions: mbstring, dom, fileinfo, mysql, pdo_mysql, bcmath, gd, zip

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Install Composer dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --optimize-autoloader

    - name: Install NPM dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Create deployment package
      run: |
        tar -czf deployment.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='tests' \
          --exclude='.github' \
          --exclude='storage/logs' \
          --exclude='storage/framework/cache' \
          --exclude='storage/framework/sessions' \
          --exclude='storage/framework/views' \
          .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment.tar.gz
        retention-days: 30

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: deployment-package

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Ici vous pouvez ajouter vos commandes de déploiement
        # Par exemple : rsync, scp, ou utiliser des services comme Heroku, Vercel, etc.

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: deployment-package

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Ici vous pouvez ajouter vos commandes de déploiement
        # Par exemple : rsync, scp, ou utiliser des services comme Heroku, Vercel, etc.

  notify:
    runs-on: ubuntu-latest
    needs: [tests, code-quality, security, build]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.tests.result == 'success' && needs.code-quality.result == 'success' && needs.security.result == 'success' }}
      run: |
        echo "✅ All checks passed! Pipeline successful."

    - name: Notify on failure
      if: ${{ needs.tests.result == 'failure' || needs.code-quality.result == 'failure' || needs.security.result == 'failure' }}
      run: |
        echo "❌ Pipeline failed. Please check the logs."
